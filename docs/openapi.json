{
  "openapi": "3.0.3",
  "info": {
    "title": "Naratama Library API",
    "version": "1.0.0",
    "description": "OpenAPI specification for the Naratama Library backend service."
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Development server"
    },
    {
      "url": "https://api.naratama.runsha.dev",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Root",
      "description": "Base service endpoint"
    },
    {
      "name": "Auth",
      "description": "Authentication and session management"
    },
    {
      "name": "Announcements",
      "description": "Public notices for library users"
    },
    {
      "name": "Books",
      "description": "Book catalogue management"
    },
    {
      "name": "Book Loans",
      "description": "Book loan lifecycle management"
    },
    {
      "name": "Rooms",
      "description": "Study room availability and bookings"
    },
    {
      "name": "Users",
      "description": "User accounts and memberships"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": ["Root"],
        "summary": "Get API status",
        "responses": {
          "200": {
            "description": "API metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Naratama Library API Server"
                    },
                    "version": {
                      "type": "string",
                      "example": "1.0.0"
                    }
                  },
                  "required": ["message", "version"]
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Authenticate user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/AuthUser"
                        }
                      },
                      "required": ["user"]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/AuthUser"
                        }
                      },
                      "required": ["user"]
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "User already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Registration error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Log out current session",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Logout error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/me": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get authenticated user profile",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Current session user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "user": {
                      "$ref": "#/components/schemas/AuthUser"
                    }
                  },
                  "required": ["success", "user"]
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/change-password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Change current password",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Current password incorrect or unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/set-password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Set password for existing account",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Password already set or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/announcements": {
      "get": {
        "tags": ["Announcements"],
        "summary": "List announcements",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "priority",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Priority"
            }
          },
          {
            "name": "targetAudience",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Audience"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AnnouncementType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged announcements",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "page": {
                          "type": "integer",
                          "minimum": 1
                        },
                        "total": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "totalPages": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Announcement"
                          }
                        }
                      },
                      "required": [
                        "count",
                        "page",
                        "total",
                        "totalPages",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Failed to fetch announcements",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Announcements"],
        "summary": "Create announcement",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnnouncementRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Announcement created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Announcement"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Staff or admin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/announcements/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectId"
          }
        }
      ],
      "get": {
        "tags": ["Announcements"],
        "summary": "Get announcement by ID",
        "responses": {
          "200": {
            "description": "Announcement details",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Announcement"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Announcement not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to fetch announcement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Announcements"],
        "summary": "Update announcement",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAnnouncementRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Announcement updated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Announcement"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Staff or admin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Announcement not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Announcements"],
        "summary": "Soft delete announcement",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Announcement deactivated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Staff or admin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Announcement not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to delete announcement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/books": {
      "get": {
        "tags": ["Books"],
        "summary": "List books",
        "parameters": [
          {
            "name": "author",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "available",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged books",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "page": {
                          "type": "integer",
                          "minimum": 1
                        },
                        "total": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "totalPages": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Book"
                          }
                        }
                      },
                      "required": [
                        "count",
                        "page",
                        "total",
                        "totalPages",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Failed to fetch books",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Books"],
        "summary": "Create book",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Book created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Book"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error or ISBN conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Staff or admin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/books/categories": {
      "get": {
        "tags": ["Books"],
        "summary": "List book categories",
        "responses": {
          "200": {
            "description": "Distinct categories",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Failed to fetch categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/books/new": {
      "get": {
        "tags": ["Books"],
        "summary": "List recently added books",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newest books",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Book"
                          }
                        }
                      },
                      "required": ["count", "data"]
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Failed to fetch new books",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/books/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectId"
          }
        }
      ],
      "get": {
        "tags": ["Books"],
        "summary": "Get book by ID",
        "responses": {
          "200": {
            "description": "Book details",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Book"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Book not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to fetch book",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Books"],
        "summary": "Update book",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Book updated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Book"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Staff or admin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Book not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Books"],
        "summary": "Soft delete book",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Book deactivated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Staff or admin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Book not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to remove book",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/books/{id}/quantity": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectId"
          }
        }
      ],
      "put": {
        "tags": ["Books"],
        "summary": "Update book quantities",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBookQuantityRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quantities updated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Book"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Staff or admin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Book not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/books-advanced/search": {
      "get": {
        "tags": ["Books"],
        "summary": "Advanced book search",
        "parameters": [
          {
            "name": "author",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "available",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["true", "false"]
            }
          },
          {
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "maxYear",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "minYear",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["title", "author", "addedDate", "publishYear"]
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "page": {
                          "type": "integer",
                          "minimum": 1
                        },
                        "total": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "totalPages": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "filters": {
                          "type": "object",
                          "properties": {
                            "author": {
                              "type": "string",
                              "nullable": true
                            },
                            "available": {
                              "type": "string",
                              "enum": ["true", "false"],
                              "nullable": true
                            },
                            "category": {
                              "type": "string",
                              "nullable": true
                            },
                            "query": {
                              "type": "string",
                              "nullable": true
                            },
                            "yearRange": {
                              "type": "object",
                              "properties": {
                                "min": {
                                  "type": ["integer", "null"]
                                },
                                "max": {
                                  "type": ["integer", "null"]
                                }
                              },
                              "nullable": true
                            }
                          }
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Book"
                          }
                        }
                      },
                      "required": [
                        "count",
                        "page",
                        "total",
                        "totalPages",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Search failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/book-loans": {
      "get": {
        "tags": ["Book Loans"],
        "summary": "List book loans",
        "parameters": [
          {
            "name": "bookId",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/LoanStatus"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged book loans",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "page": {
                          "type": "integer",
                          "minimum": 1
                        },
                        "total": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "totalPages": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/BookLoanDetailed"
                          }
                        }
                      },
                      "required": [
                        "count",
                        "page",
                        "total",
                        "totalPages",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Failed to fetch loans",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Book Loans"],
        "summary": "Create book loan",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookLoanRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Book loan created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/BookLoanDetailed"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation or business rule failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Staff or admin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/book-loans/overdue": {
      "get": {
        "tags": ["Book Loans"],
        "summary": "List overdue loans",
        "responses": {
          "200": {
            "description": "Overdue loans",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/BookLoanOverdue"
                          }
                        }
                      },
                      "required": ["count", "data"]
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Failed to fetch overdue loans",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/book-loans/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectId"
          }
        }
      ],
      "get": {
        "tags": ["Book Loans"],
        "summary": "Get loan by ID",
        "responses": {
          "200": {
            "description": "Loan details",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/BookLoanDetailed"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Loan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to fetch loan",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/book-loans/{id}/return": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectId"
          }
        }
      ],
      "put": {
        "tags": ["Book Loans"],
        "summary": "Return a book loan",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReturnBookLoanRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Loan returned",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/BookLoanDetailed"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation or status error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Staff or admin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Loan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/book-loans/{id}/extend": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectId"
          }
        }
      ],
      "put": {
        "tags": ["Book Loans"],
        "summary": "Extend loan due date",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendBookLoanRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Loan extended",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/BookLoanDetailed"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation or business rule error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Staff or admin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Loan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rooms": {
      "get": {
        "tags": ["Rooms"],
        "summary": "List rooms",
        "parameters": [
          {
            "name": "available",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["true", "false"]
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/RoomType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rooms",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Room"
                          }
                        }
                      },
                      "required": ["count", "data"]
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Failed to fetch rooms",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rooms/availability/{roomId}": {
      "parameters": [
        {
          "name": "roomId",
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectId"
          }
        }
      ],
      "get": {
        "tags": ["Rooms"],
        "summary": "Check room availability",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Availability information",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "available": {
                          "type": "boolean"
                        },
                        "existingBookings": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/RoomBookingSlot"
                          }
                        }
                      },
                      "required": ["available", "existingBookings"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid date",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to check availability",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rooms/bookings": {
      "get": {
        "tags": ["Rooms"],
        "summary": "List room bookings",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "roomId",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/BookingStatus"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged room bookings",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "page": {
                          "type": "integer",
                          "minimum": 1
                        },
                        "total": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "totalPages": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/RoomBookingDetailed"
                          }
                        }
                      },
                      "required": [
                        "count",
                        "page",
                        "total",
                        "totalPages",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Failed to fetch room bookings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Rooms"],
        "summary": "Create room booking",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoomBookingRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Room booking created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/RoomBookingDetailed"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation or scheduling error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Staff or admin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rooms/bookings/{id}/status": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectId"
          }
        }
      ],
      "put": {
        "tags": ["Rooms"],
        "summary": "Update booking status",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoomBookingStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Booking status updated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/RoomBookingDetailed"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Staff or admin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Booking not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rooms/bookings/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectId"
          }
        }
      ],
      "delete": {
        "tags": ["Rooms"],
        "summary": "Cancel booking",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Booking cancelled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Staff or admin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Booking not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to cancel booking",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": ["Users"],
        "summary": "List users",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "parameters": [
          {
            "name": "isActive",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["true", "false"]
            }
          },
          {
            "name": "isMember",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["true", "false"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/User"
                          }
                        }
                      },
                      "required": ["count", "data"]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Staff role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to fetch users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/me": {
      "get": {
        "tags": ["Users"],
        "summary": "Get current user profile",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectId"
          }
        }
      ],
      "get": {
        "tags": ["Users"],
        "summary": "Get user by ID",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to fetch user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update user profile",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Deactivate user",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "User deactivated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Admin role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to deactivate user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/phone/{phoneNumber}": {
      "parameters": [
        {
          "name": "phoneNumber",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": ["Users"],
        "summary": "Lookup user by phone",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Staff role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to fetch user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}/membership": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectId"
          }
        }
      ],
      "put": {
        "tags": ["Users"],
        "summary": "Activate or extend membership",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Membership updated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Failed to update membership",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Staff role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Deactivate membership",
        "security": [
          {
            "SessionCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Membership deactivated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/BaseSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      },
                      "required": ["data"]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Failed to deactivate membership",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Staff role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "SessionCookie": {
        "type": "apiKey",
        "in": "cookie",
        "name": "connect.sid",
        "description": "Session cookie issued after successful login"
      }
    },
    "schemas": {
      "BaseSuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "required": ["success"]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string"
          },
          "error": {
            "type": ["string", "object"],
            "nullable": true
          }
        },
        "required": ["success", "message"]
      },
      "ObjectId": {
        "type": "string",
        "pattern": "^[a-fA-F0-9]{24}$",
        "example": "64b7d2c6f2a5c2b1a0d4e5f6"
      },
      "AnnouncementType": {
        "type": "string",
        "enum": ["NEW_BOOKS", "EVENT", "MAINTENANCE", "POLICY", "GENERAL"]
      },
      "Priority": {
        "type": "string",
        "enum": ["LOW", "MEDIUM", "HIGH", "URGENT"]
      },
      "Audience": {
        "type": "string",
        "enum": ["ALL", "MEMBERS_ONLY", "STAFF"]
      },
      "LoanStatus": {
        "type": "string",
        "enum": ["ACTIVE", "RETURNED", "OVERDUE", "LOST"]
      },
      "BookingStatus": {
        "type": "string",
        "enum": ["PENDING", "CONFIRMED", "CANCELLED", "COMPLETED"]
      },
      "PaymentStatus": {
        "type": "string",
        "enum": ["UNPAID", "PAID", "REFUNDED"]
      },
      "RoomType": {
        "type": "string",
        "enum": ["SMALL_DISCUSSION", "LARGE_MEETING"]
      },
      "UserRole": {
        "type": "string",
        "enum": ["USER", "ADMIN", "STAFF"]
      },
      "Announcement": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/AnnouncementType"
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          },
          "isActive": {
            "type": "boolean"
          },
          "publishDate": {
            "type": "string",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "targetAudience": {
            "$ref": "#/components/schemas/Audience"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "createdBy": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "viewCount": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "title",
          "content",
          "type",
          "priority",
          "isActive",
          "publishDate",
          "targetAudience",
          "attachments",
          "createdBy",
          "viewCount",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateAnnouncementRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/AnnouncementType"
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          },
          "targetAudience": {
            "$ref": "#/components/schemas/Audience"
          },
          "createdBy": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "publishDate": {
            "type": "string",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["title", "content", "createdBy"]
      },
      "UpdateAnnouncementRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/AnnouncementType"
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          },
          "targetAudience": {
            "$ref": "#/components/schemas/Audience"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "publishDate": {
            "type": "string",
            "format": "date-time"
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "AuthUser": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "name": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "isActive": {
            "type": "boolean"
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "membership": {
            "$ref": "#/components/schemas/Membership"
          }
        },
        "required": ["id", "email", "name", "phoneNumber", "role", "isActive"]
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        },
        "required": ["email", "password"]
      },
      "RegisterRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "format": "password"
          },
          "phoneNumber": {
            "type": "string"
          }
        },
        "required": ["email", "name", "password", "phoneNumber"]
      },
      "ChangePasswordRequest": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "format": "password"
          },
          "newPassword": {
            "type": "string",
            "format": "password"
          }
        },
        "required": ["currentPassword", "newPassword"]
      },
      "SetPasswordRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        },
        "required": ["email", "password"]
      },
      "Book": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "isbn": {
            "type": "string"
          },
          "coverImage": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "title": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "publisher": {
            "type": "string"
          },
          "publishYear": {
            "type": "integer"
          },
          "category": {
            "type": "string"
          },
          "genre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "language": {
            "type": "string"
          },
          "pages": {
            "type": "integer"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer"
          },
          "availableQuantity": {
            "type": "integer"
          },
          "location": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "addedDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "isbn",
          "title",
          "author",
          "publisher",
          "publishYear",
          "category",
          "genre",
          "language",
          "pages",
          "quantity",
          "availableQuantity",
          "location",
          "isActive",
          "addedDate",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateBookRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "isbn": {
            "type": "string"
          },
          "publisher": {
            "type": "string"
          },
          "publishYear": {
            "type": "integer"
          },
          "category": {
            "type": "string"
          },
          "genre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "language": {
            "type": "string"
          },
          "pages": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "quantity": {
            "type": "integer"
          },
          "availableQuantity": {
            "type": "integer"
          },
          "location": {
            "type": "string"
          },
          "coverImage": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "title",
          "author",
          "isbn",
          "publisher",
          "publishYear",
          "category",
          "genre",
          "pages",
          "availableQuantity",
          "location"
        ]
      },
      "UpdateBookRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "isbn": {
            "type": "string"
          },
          "publisher": {
            "type": "string"
          },
          "publishYear": {
            "type": "integer"
          },
          "category": {
            "type": "string"
          },
          "genre": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "language": {
            "type": "string"
          },
          "pages": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "quantity": {
            "type": "integer"
          },
          "availableQuantity": {
            "type": "integer"
          },
          "location": {
            "type": "string"
          },
          "coverImage": {
            "type": "string",
            "format": "uri"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "UpdateBookQuantityRequest": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer"
          },
          "availableQuantity": {
            "type": "integer"
          }
        },
        "required": ["quantity", "availableQuantity"]
      },
      "Membership": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "userId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "membershipNumber": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "isActive": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserSummary": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "name": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "membership": {
            "$ref": "#/components/schemas/Membership"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "name": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "isActive": {
            "type": "boolean"
          },
          "isOauthUser": {
            "type": "boolean"
          },
          "joinDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "membership": {
            "$ref": "#/components/schemas/Membership"
          }
        },
        "required": [
          "id",
          "name",
          "phoneNumber",
          "email",
          "role",
          "isActive",
          "isOauthUser",
          "joinDate",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          }
        }
      },
      "BookLoan": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "userId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "bookId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "loanDate": {
            "type": "string",
            "format": "date-time"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time"
          },
          "returnDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/LoanStatus"
          },
          "fine": {
            "type": "number"
          },
          "renewalCount": {
            "type": "integer"
          },
          "maxRenewals": {
            "type": "integer"
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "lateFeesPerDay": {
            "type": "number"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BookLoanBookRef": {
        "type": "object",
        "properties": {
          "author": {
            "type": "string"
          },
          "isbn": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "BookLoanUserRef": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "membership": {
            "$ref": "#/components/schemas/Membership"
          }
        }
      },
      "BookLoanDetailed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BookLoan"
          },
          {
            "type": "object",
            "properties": {
              "book": {
                "$ref": "#/components/schemas/BookLoanBookRef"
              },
              "user": {
                "$ref": "#/components/schemas/BookLoanUserRef"
              }
            }
          }
        ]
      },
      "BookLoanOverdue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BookLoanDetailed"
          }
        ]
      },
      "CreateBookLoanRequest": {
        "type": "object",
        "properties": {
          "bookId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "userId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          }
        },
        "required": ["bookId", "userId", "dueDate"]
      },
      "ReturnBookLoanRequest": {
        "type": "object",
        "properties": {
          "returnDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          }
        },
        "required": ["returnDate"]
      },
      "ExtendBookLoanRequest": {
        "type": "object",
        "properties": {
          "extensionDays": {
            "type": "integer",
            "minimum": 1,
            "maximum": 30,
            "default": 7
          }
        }
      },
      "Room": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "roomNumber": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RoomType"
          },
          "capacity": {
            "type": "integer"
          },
          "hourlyRate": {
            "type": "number"
          },
          "amenities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isAvailable": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RoomSummary": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "roomNumber": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RoomType"
          },
          "hourlyRate": {
            "type": "number"
          }
        }
      },
      "RoomBooking": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "userId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "roomId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "bookingDate": {
            "type": "string",
            "format": "date-time"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "type": "number"
          },
          "totalCost": {
            "type": "number"
          },
          "status": {
            "$ref": "#/components/schemas/BookingStatus"
          },
          "paymentStatus": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "purpose": {
            "type": "string",
            "nullable": true
          },
          "specialRequests": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RoomBookingDetailed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RoomBooking"
          },
          {
            "type": "object",
            "properties": {
              "room": {
                "$ref": "#/components/schemas/RoomSummary"
              },
              "user": {
                "$ref": "#/components/schemas/UserSummary"
              }
            }
          }
        ]
      },
      "RoomBookingSlot": {
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "type": "number"
          }
        },
        "required": ["startTime", "endTime", "duration"]
      },
      "CreateRoomBookingRequest": {
        "type": "object",
        "properties": {
          "bookingDate": {
            "type": "string",
            "format": "date-time"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "roomId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "userId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "purpose": {
            "type": "string"
          },
          "specialRequests": {
            "type": "string"
          }
        },
        "required": ["bookingDate", "startTime", "endTime", "roomId", "userId"]
      },
      "UpdateRoomBookingStatusRequest": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/BookingStatus"
          },
          "paymentStatus": {
            "$ref": "#/components/schemas/PaymentStatus"
          }
        }
      }
    }
  }
}
